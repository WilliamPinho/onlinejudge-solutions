#include <iostream>
#include <sstream>

using namespace std;

string c5[][5] = {
    {".***..", "*...*.", "*****.", "*...*.", "*...*."},
    {"****..", "*...*.", "****..", "*...*.", "****.."},
    {".****.", "*...*.", "*.....", "*.....", ".****."},
    {"****..", "*...*.", "*...*.", "*...*.", "****.."},
    {"*****.", "*.....", "***...", "*.....", "*****."},
    {"*****.", "*.....", "***...", "*.....", "*....."},
    {".****.", "*.....", "*..**.", "*...*.", ".***.."},
    {"*...*.", "*...*.", "*****.", "*...*.", "*...*."},
    {"*****.", "..*...", "..*...", "..*...", "*****."},
    {"..***.", "...*..", "...*..", "*..*..", ".**..."},
    {"*...*.", "*..*..", "***...", "*..*..", "*...*."},
    {"*.....", "*.....", "*.....", "*.....", "*****."},
    {"*...*.", "**.**.", "*.*.*.", "*...*.", "*...*."},
    {"*...*.", "**..*.", "*.*.*.", "*..**.", "*...*."},
    {".***..", "*...*.", "*...*.", "*...*.", ".***.."},
    {"****..", "*...*.", "****..", "*.....", "*....."},
    {".***..", "*...*.", "*...*.", "*..**.", ".****."},
    {"****..", "*...*.", "****..", "*..*..", "*...*."},
    {".****.", "*.....", ".***..", "....*.", "****.."},
    {"*****.", "*.*.*.", "..*...", "..*...", ".***.."},
    {"*...*.", "*...*.", "*...*.", "*...*.", ".***.."},
    {"*...*.", "*...*.", ".*.*..", ".*.*..", "..*..."},
    {"*...*.", "*...*.", "*.*.*.", "**.**.", "*...*."},
    {"*...*.", ".*.*..", "..*...", ".*.*..", "*...*."},
    {"*...*.", ".*.*..", "..*...", "..*...", "..*..."},
    {"*****.", "...*..", "..*...", ".*....", "*****."},
};

int main(int argc, char *argv[]) {
  ios::sync_with_stdio(false);
  while(true) {
    char grid[60][60];
    for (int i = 0; i < 60; ++i)
      for (int j = 0; j < 60; ++j)
        grid[i][j] = '.';
    string line, cmd, font;
    while(getline(cin, line), line != ".EOP") {
      if(cin.eof()) return 0;
      stringstream ss(line);
      int row, col = 0;
      ss >> cmd >> font >> row;
      row--;
      if(cmd == ".P") ss >> col;
      col--;
      char c;
      string text;
      ss >> c;
      getline(ss,text);
      text.pop_back();
      int textLen = text.size();
      if(font == "C5") textLen *= 6;
      if(cmd == ".C") col = 30 - textLen/2;
      else if (cmd == ".L") col = 0;
      else if (cmd == ".R") col = 60 - textLen;
      if(font == "C1") { 
        for(int i = 0; i < text.size(); ++i) 
          if(col + i >= 0 && col + i < 60 && text[i] != ' ') 
            grid[row][col+i] = text[i];
      } else {
        for(int i = 0; i < text.size(); ++i, col += 6) {
          if(text[i] == ' ') continue;
          string* letter = c5[text[i]-'A'];
          for (int m = 0; m < 5; ++m) {
            for (int n = 0; n < 6; ++n) {
              int x = row + m, y = col + n;
              if(x >= 0 && x < 60 && y >= 0 && y < 60 && letter[m][n] == '*')
                grid[x][y] = letter[m][n];  
            }
          }
        }
      } 
    }
    for(int i = 0; i < 60; ++i) {
      for (int j = 0; j < 60; ++j) {
        cout << grid[i][j];
      }
      cout << endl;
    }
    cout << endl;
    for (int i = 0; i < 60; ++i) cout << '-';
    cout << endl << endl;
  }
  return 0;
}
